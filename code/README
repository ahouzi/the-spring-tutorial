=======================================================================================================================
TODO
 - clean up the UI (maybe a watermark of the S2 logo in the background of the page that doesnt move even when you scroll?
 - setup a Spring Integration flow that takes the uploaded image, resizes it, forwards the image to an http WS
   that in turn emails the image as an attachment for someone to review in an email client and then type 'approve'
   or 'disapprove' to make sure the images aren't lude. if they type 'approve' the image is 'enabled'

   so there are two flows:
    a) resize image and respond w/ resized image.
    b) send image for moderation in a way that demonstrates hybrid cloud integration: CF propagates oauth creds
       to a WS from the original AMQP context, and then uses that to securely send an email to the administrator asking
       for approval. if the reply comes back 'yes' then the image is enabled. otherwise, a timeout happens and some sort
       of escalation, maybe? iono. Either way, this would be a nice example of using Si to work with inbound
       http (basic auth), amqp, smtp, spring security, etc.

 - make it possible to signup/register with Spring Social
 - use MongoDB and Redis somehow (gridfs, caching? what about gemfire?)

=======================================================================================================================


This is a simple application that demonstrates how to use Spring 3.1 on Cloud Foundry.
This application builds a transactional service that talks to an RDBMS and is fronted by
an Spring MVC controller which handles RESTful API calls. 

Deployment is easy, and there are a lot of options: 

From an Eclipse environment like the SpringSource Tool Suite equipped with the m2e and Cloud Foundry WTP connector support: 
1) Import the project into Eclipse using the m2e / m2eclipse plugin - File > Import > Maven > Existing Maven Projects. 
2) Setup a Cloud Foundry WTP server pointing to the Cloud Foundry cloud you want to target
3) Drag and drop the application onto the Cloud Foundry WTP instance, and specify that you need a Redis service and a PostgreSQL service and 512M of RAM.

You can use the vmc command line tool, too.
0) you need to change the name of the application as specified in your manifest.yml file, if there's already an existing application deployed under the same name on the Cloud Foundry instance
1) Run 'mvn clean install' on the command line from the root of the project to create a binary. 
2) From the root of the project, run 'vmc --path target/springmvc31-1.0.0 push'

You should also be able to deploy the project using the Maven Cloud Foundry plugin, which is already configured. You need to specify 
connectivity information in your ~/.m2/settings.xml file, as described in http://blog.springsource.org/2011/09/22/rapid-cloud-foundry-deployments-with-maven/ 
0) you need to change the name of the application as specified in your manifest.yml file, if there's already an existing application deployed under the same name on the Cloud Foundry instance
1) from the root of the project, run 'mvn clean install'
2) then run 'mvn cf:push' 



Here are some SQL statements to setup the database:

 H2
 insert into customer (firstname ,lastname ,signupdate ) values( 'Juergen'  , 'Hoeller', NOW()) ;
 insert into customer (firstname ,lastname ,signupdate ) values( 'Mark'  , 'Fisher', NOW()) ;
 insert into customer (firstname ,lastname ,signupdate ) values( 'Chris'  , 'Richardson', NOW()) ;
 insert into customer (firstname ,lastname ,signupdate ) values( 'Josh'  , 'Long', NOW()) ;
 insert into customer (firstname ,lastname ,signupdate ) values( 'Dave'  , 'Syer', NOW()) ;
 insert into customer (firstname ,lastname ,signupdate ) values( 'Matt'  , 'Quinlan', NOW()) ;
 insert into customer (firstname ,lastname ,signupdate ) values( 'Gunnar'  , 'Hillert', NOW()) ;
 insert into customer (firstname ,lastname ,signupdate ) values( 'Dave'  , 'McCrory', NOW()) ;
 insert into customer (firstname ,lastname ,signupdate ) values( 'Raja'  , 'Rao', NOW()) ;
 insert into customer (firstname ,lastname ,signupdate ) values( 'Monica'  , 'Wilkinson', NOW()) ;


 PostgreSQL
 INSERT INTO customer(id, firstname, lastname, signupdate) values( nextval( 'hibernate_sequence') , 'Mark', 'Fisher', NOW()) ;
 INSERT INTO customer(id, firstname, lastname, signupdate) values( nextval( 'hibernate_sequence') , 'Juergen', 'Hoeller', NOW()) ;
 INSERT INTO customer(id, firstname, lastname, signupdate) values( nextval( 'hibernate_sequence') , 'Chris', 'Richardson', NOW()) ;
 INSERT INTO customer(id, firstname, lastname, signupdate) values( nextval( 'hibernate_sequence') , 'Dave', 'Syer', NOW()) ;
 INSERT INTO customer(id, firstname, lastname, signupdate) values( nextval( 'hibernate_sequence') , 'Patrick', 'Chanezon', NOW()) ;
 INSERT INTO customer(id, firstname, lastname, signupdate) values( nextval( 'hibernate_sequence') , 'Gunnar', 'Hiller', NOW()) ;
 INSERT INTO customer(id, firstname, lastname, signupdate) values( nextval( 'hibernate_sequence') , 'Josh', 'Long', NOW()) ;
 INSERT INTO customer(id, firstname, lastname, signupdate) values( nextval( 'hibernate_sequence') , 'Dave', 'McCrory', NOW()) ;
 INSERT INTO customer(id, firstname, lastname, signupdate) values( nextval( 'hibernate_sequence') , 'Raja', 'Rao', NOW()) ;
 INSERT INTO customer(id, firstname, lastname, signupdate) values( nextval( 'hibernate_sequence') , 'Andy', 'Piper', NOW()) ;
 INSERT INTO customer(id, firstname, lastname, signupdate) values( nextval( 'hibernate_sequence') , 'Eric', 'Bottard', NOW()) ;