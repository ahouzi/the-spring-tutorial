<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
       xmlns:sec="http://www.springframework.org/schema/security"
       xmlns:beans="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="
       http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">


    <authentication-manager alias="authenticationManager" xmlns="http://www.springframework.org/schema/security">
        <authentication-provider user-service-ref="userService"/>
    </authentication-manager>


    <!-- Just for testing... -->
    <http pattern="/oauth/cache_approvals" security="none" xmlns="http://www.springframework.org/schema/security"/>
    <http pattern="/oauth/uncache_approvals" security="none" xmlns="http://www.springframework.org/schema/security"/>

    <http pattern="/oauth/token" create-session="stateless" authentication-manager-ref="authenticationManager"
          entry-point-ref="oauthAuthenticationEntryPoint" xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY"/>
        <anonymous enabled="false"/>
        <http-basic entry-point-ref="oauthAuthenticationEntryPoint"/>
        <!-- include this only if you need to authenticate clients via request parameters -->
        <custom-filter ref="clientCredentialsTokenEndpointFilter" before="BASIC_AUTH_FILTER"/>
        <access-denied-handler ref="oauthAccessDeniedHandler"/>
    </http>


    <!-- The OAuth2 protected resources are separated out into their own block so we can deal with authorization and error handling
separately. This isn't mandatory, but it makes it easier to control the behaviour. -->
    <http pattern="/oauth/(users|clients)/.*" request-matcher="regex" create-session="stateless"
          entry-point-ref="oauthAuthenticationEntryPoint"
          use-expressions="true" xmlns="http://www.springframework.org/schema/security">
        <anonymous enabled="false"/>
        <intercept-url pattern="/oauth/users/([^/].*?)/tokens/.*"
                       access="#oauth2.clientHasRole('ROLE_CLIENT') and (hasRole('ROLE_USER') or #oauth2.isClient()) and #oauth2.hasScope('write')"
                       method="DELETE"/>
        <intercept-url pattern="/oauth/users/.*"
                       access="#oauth2.clientHasRole('ROLE_CLIENT') and (hasRole('ROLE_USER') or #oauth2.isClient()) and #oauth2.hasScope('read')"
                       method="GET"/>
        <intercept-url pattern="/oauth/clients/.*"
                       access="#oauth2.clientHasRole('ROLE_CLIENT') and #oauth2.isClient() and #oauth2.hasScope('read')"
                       method="GET"/>
        <custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER"/>
        <access-denied-handler ref="oauthAccessDeniedHandler"/>
        <expression-handler ref="oauthWebExpressionHandler"/>
    </http>

    <!--
    todo make it so that the /api/users/{userId}/photo url is anonymous for reads, ROLE_USER,SCOPE_READ for writes
    todo like this (thanks Dr. Syer)
    todo You might still be able to use security=none if you add that chain after the one that is secure
    todo and also use a custom request matcher that doesn't match GET

    <intercept-url pattern="/photo" access="IS_AUTHENTICATED_ANONYMOUSLY" method="GET"/>
    -->
    <!--
        <http pattern="/api/users/**/photo" create-session="never"  xmlns="http://www.springframework.org/schema/security" security="none"/>
    -->

    <http pattern="/api/crm/search**" create-session="never" xmlns="http://www.springframework.org/schema/security"
          security="none"/>

    <http pattern="/api/**" create-session="never" entry-point-ref="oauthAuthenticationEntryPoint"
          access-decision-manager-ref="accessDecisionManager" xmlns="http://www.springframework.org/schema/security">
        <anonymous enabled="true"/>
        <intercept-url pattern="/api/users/**/photo" method="GET" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <intercept-url pattern="/api/users/usernames/**" method="GET" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <intercept-url pattern="/api/users/**/photo" method="POST" access="ROLE_USER,SCOPE_READ"/>
        <!-- you should be allowed to create a new user without being logged in, obviously -->
        <intercept-url pattern="/api/users" method="POST" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <intercept-url pattern="/api/**" access="ROLE_USER,SCOPE_READ"/>
        <custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER"/>
        <access-denied-handler ref="oauthAccessDeniedHandler"/>
    </http>

    <http auto-config="true" xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/oauth/**" access="ROLE_USER"/>
        <intercept-url pattern="/crm/profile.html" access="ROLE_USER"/>
        <intercept-url pattern="/crm/customers.html" access="ROLE_USER"/>
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <form-login login-page="/crm/signin.html"
                    default-target-url="/crm/profile.html"
                    authentication-failure-url="/crm/signin.html?error=true"/>
        <intercept-url pattern="/web/views/**" access="ROLE_USER"/>
        <anonymous/>
    </http>

    <beans:alias name="userService" alias="clientDetailsService"/>

    <oauth:authorization-server client-details-service-ref="clientDetailsService"
                                token-services-ref="tokenServices"
                                user-approval-handler-ref="oauthTokenServicesUserApprovalHandler">
        <oauth:authorization-code/>
        <oauth:implicit/>
        <oauth:refresh-token/>
        <oauth:client-credentials/>
        <oauth:password/>
    </oauth:authorization-server>

    <oauth:resource-server id="resourceServerFilter" resource-id="crm" token-services-ref="tokenServices"/>

    <sec:global-method-security pre-post-annotations="enabled" proxy-target-class="true">
        <!--you could also wire in the expression handler up at the layer of the http filters. See https://jira.springsource.org/browse/SEC-1452 -->
        <sec:expression-handler ref="oauthExpressionHandler"/>
    </sec:global-method-security>

    <oauth:expression-handler id="oauthExpressionHandler"/>

    <oauth:web-expression-handler id="oauthWebExpressionHandler"/>


</beans>
